

/*
 * Workflow
 * This API uses the workflow capability of SAP Build Process Automation. With the API, you can, for example, start new workflow instances and work with tasks.  Note: These APIs are designed for loosely coupled clients. This means:  - If SAP Build Process Automation adds fields to responses, the API version number does not increase. Your client must ignore new fields. - The order of fields in responses and of entries in arrays may change. This applies unless the API provides an explicit means to specify the desired order. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package customer.demo.spa.model;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import customer.demo.spa.model.AttachmentsContextGroupsValue;
import java.util.HashMap;
import java.util.Map;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * AttachmentsContext
 */

// CHECKSTYLE:OFF
public class AttachmentsContext 
// CHECKSTYLE:ON
{
  @JsonProperty("rootFolder")
  private String rootFolder;

  @JsonProperty("groups")
  private Map<String, AttachmentsContextGroupsValue> groups = new HashMap<>();

  @JsonAnySetter
  @JsonAnyGetter
  private final Map<String, Object> cloudSdkCustomFields = new LinkedHashMap<>();

   /**
   * Set the rootFolder of this {@link AttachmentsContext} instance and return the same instance.
   *
   * @param rootFolder  A folder that shall be used for uploading files at the remote repository.
   * @return The same instance of this {@link AttachmentsContext} class
   */
   @Nonnull public AttachmentsContext rootFolder(@Nonnull final String rootFolder) {
    this.rootFolder = rootFolder;
    return this;
  }

   /**
   * A folder that shall be used for uploading files at the remote repository.
   * @return rootFolder  The rootFolder of this {@link AttachmentsContext} instance.
  **/
  @Nonnull public String getRootFolder() {
    return rootFolder;
  }

  /**
  * Set the rootFolder of this {@link AttachmentsContext} instance.
  *
  * @param rootFolder  A folder that shall be used for uploading files at the remote repository.
  */
  public void setRootFolder( @Nonnull final String rootFolder) {
    this.rootFolder = rootFolder;
  }

   /**
   * Set the groups of this {@link AttachmentsContext} instance and return the same instance.
   *
   * @param groups  A map of groups allowing to semantically separate attachments. The key is the group name.
   * @return The same instance of this {@link AttachmentsContext} class
   */
   @Nonnull public AttachmentsContext groups(@Nonnull final Map<String, AttachmentsContextGroupsValue> groups) {
    this.groups = groups;
    return this;
  }

   /**
   * Put one groups instance to this {@link AttachmentsContext} instance.
   * @param key The String key of this groups instance
   * @param groupsItem The groups that should be added under the given key
   * @return The same instance of type {@link AttachmentsContext}
   */
   @Nonnull public AttachmentsContext putgroupsItem(@Nonnull final String key, @Nonnull final AttachmentsContextGroupsValue groupsItem) {
      this.groups = new HashMap<>();
    this.groups.put(key, groupsItem);
    return this;
  }

   /**
   * A map of groups allowing to semantically separate attachments. The key is the group name.
   * @return groups  The groups of this {@link AttachmentsContext} instance.
  **/
  @Nonnull public Map<String, AttachmentsContextGroupsValue> getGroups() {
    return groups;
  }

  /**
  * Set the groups of this {@link AttachmentsContext} instance.
  *
  * @param groups  A map of groups allowing to semantically separate attachments. The key is the group name.
  */
  public void setGroups( @Nonnull final Map<String, AttachmentsContextGroupsValue> groups) {
    this.groups = groups;
  }

  /**
   * Get the names of the unrecognizable properties of the {@link AttachmentsContext}.
   * @return The set of properties names
   */
  @JsonIgnore
  @Nonnull
  public Set<String> getCustomFieldNames() {
    return cloudSdkCustomFields.keySet();
  }

  /**
   * Get the value of an unrecognizable property of this {@link AttachmentsContext} instance.
   * @param name  The name of the property
   * @return The value of the property
   * @throws NoSuchElementException  If no property with the given name could be found.
   */
  @Nullable
  public Object getCustomField(@Nonnull final String name) throws NoSuchElementException {
    if( !cloudSdkCustomFields.containsKey(name) ) {
        throw new NoSuchElementException("AttachmentsContext has no field with name '" + name + "'.");
    }
    return cloudSdkCustomFields.get(name);
  }

  /**
   * Set an unrecognizable property of this {@link AttachmentsContext} instance. If the map previously contained a mapping
   * for the key, the old value is replaced by the specified value.
   * @param customFieldName The name of the property
   * @param customFieldValue The value of the property
   */
  @JsonIgnore
  public void setCustomField( @Nonnull String customFieldName, @Nullable Object customFieldValue )
  {
      cloudSdkCustomFields.put(customFieldName, customFieldValue);
  }


  @Override
  public boolean equals(@Nullable final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final AttachmentsContext attachmentsContext = (AttachmentsContext) o;
    return Objects.equals(this.cloudSdkCustomFields, attachmentsContext.cloudSdkCustomFields) &&
        Objects.equals(this.rootFolder, attachmentsContext.rootFolder) &&
        Objects.equals(this.groups, attachmentsContext.groups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootFolder, groups, cloudSdkCustomFields);
  }

  @Override
  @Nonnull public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentsContext {\n");
    sb.append("    rootFolder: ").append(toIndentedString(rootFolder)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    cloudSdkCustomFields.forEach((k,v) -> sb.append("    ").append(k).append(": ").append(toIndentedString(v)).append("\n"));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

